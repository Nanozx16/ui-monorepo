service: ${file(./package.json):name}

useDotenv: true

custom:
  fake-email:
    enabled:
      default: false
      dev: true
  serverless-offline:
    httpPort: 4000

functions:
  claim-tokens:
    environment:
      CLAIM_WELCOME_PACK_ZAPIER_WEBHOOK_URL: ${env:CLAIM_WELCOME_PACK_ZAPIER_WEBHOOK_URL, ''}
      ENABLE_DUPLICATED_EMAIL_CHECK: ${env:ENABLE_DUPLICATED_EMAIL_CHECK, 'true'}
      ENABLE_IP_CHECK: ${env:ENABLE_IP_CHECK, 'true'}
      HASH_SECRET_KEY: ${env:HASH_SECRET_KEY, ''}
      IP_QUALITY_SCORE_SECRET_KEY: ${env:IP_QUALITY_SCORE_SECRET_KEY, ''}
      PORTAL_DOMAIN_URL: ${env:PORTAL_DOMAIN_URL, 'http://127.0.0.1:3001'}
      RECAPTCHA_SECRET_KEY: ${env:RECAPTCHA_SECRET_KEY, ''}
    events:
      - http:
          cors: true
          method: post
          path: /claim
    handler: ./index.post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds:BeginTransaction
          - rds:CommitTransaction
          - rds:ExecuteStatement
          - rds:RollbackTransaction
        Resource: arn:aws:rds:::db:${self:provider.environment.POSTGRES_CONNECTION_DATABASE}
  clear-tables:
    handler: ./clear-tables.post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds:BeginTransaction
          - rds:CommitTransaction
          - rds:ExecuteStatement
          - rds:RollbackTransaction
        Resource: arn:aws:rds:::db:${self:provider.environment.POSTGRES_CONNECTION_DATABASE}
  fake-email:
    enabled: ${self:custom.fake-email.enabled.${self:provider.stage}, self:custom.fake-email.enabled.default}
    events:
      - http:
          method: post
          path: /fake-email
    handler: ./fake-email.post

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-conditional-functions
  - serverless-plugin-monorepo
  - serverless-offline

provider:
  environment:
    LOGGER_CONSOLE_LEVEL: ${env:DEPLOY_LOGGER_CONSOLE_LEVEL,'debug'}
    LOGGER_PAPERTRAIL_HOST: ${env:DEPLOY_LOGGER_PAPERTRAIL_HOST,''}
    LOGGER_PAPERTRAIL_LEVEL: ${env:DEPLOY_LOGGER_PAPERTRAIL_LEVEL,'info'}
    LOGGER_PAPERTRAIL_PORT: ${env:DEPLOY_ LOGGER_PAPERTRAIL_PORT,''}
    LOGGER_PAPERTRAIL_PROGRAM: ${self:service}-${self:provider.stage}
    NODE_ENV: ${self:provider.stage}
    POSTGRES_CONNECTION_DATABASE: ${env:DEPLOY_POSTGRES_CONNECTION_DATABASE, ''}
    POSTGRES_CONNECTION_HOST: ${env:DEPLOY_POSTGRES_CONNECTION_HOST, ''}
    POSTGRES_CONNECTION_PASSWORD: ${env:DEPLOY_POSTGRES_CONNECTION_PASSWORD, ''}
    POSTGRES_CONNECTION_USER: ${env:DEPLOY_POSTGRES_CONNECTION_USER, ''}
  name: 'aws'
  region: ${opt:region,env:AWS_REGION,'eu-central-1'}
  runtime: nodejs20.x
  stage: ${opt:stage,env:STAGE,'dev'}
