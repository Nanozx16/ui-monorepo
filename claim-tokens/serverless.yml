service: ${file(./package.json):name}

useDotenv: true

custom:
  fake-email:
    enabled:
      default: false
      dev: true
  serverless-offline:
    httpPort: 4000

functions:
  claim-tokens:
    environment:
      MARKETING_DOMAIN_URL: ${env:MARKETING_DOMAIN_URL, 'http://127.0.0.1:3001'}
      IP_QUALITY_SCORE_SECRET_KEY: ${env:IP_QUALITY_SCORE_SECRET_KEY, ''}
      RECAPTCHA_SECRET_KEY: ${env:RECAPTCHA_SECRET_KEY, ''}
    events:
      - http:
          cors:
            headers:
              - Content-Type
            origins:
              - ${self:functions.claim-tokens.environment.MARKETING_DOMAIN_URL}:*
          method: post
          path: /claim
    handler: ./index.post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rds:BeginTransaction
          - rds:CommitTransaction
          - rds:ExecuteStatement
          - rds:RollbackTransaction
        Resource: arn:aws:rds:::db:${self:provider.environment.POSTGRES_CONNECTION_DATABASE}
  # Use this lambda to simulate fake email sending instead of using zappier
  # uncomment if needed
  # fake-email:
  #   events:
  #     - http:
  #         method: post
  #         path: /fake-email
  #   handler: ./fake-email.post

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  environment:
    LOGGER_CONSOLE_LEVEL: ${env:DEPLOY_LOGGER_CONSOLE_LEVEL,'debug'}
    LOGGER_PAPERTRAIL_HOST: ${env:DEPLOY_LOGGER_PAPERTRAIL_HOST,''}
    LOGGER_PAPERTRAIL_LEVEL: ${env:DEPLOY_LOGGER_PAPERTRAIL_LEVEL,'info'}
    LOGGER_PAPERTRAIL_PORT: ${env:DEPLOY_ LOGGER_PAPERTRAIL_PORT,''}
    LOGGER_PAPERTRAIL_PROGRAM: ${self:service}-${self:provider.stage}
    NODE_ENV: ${self:provider.stage}
    POSTGRES_CONNECTION_DATABASE: ${env:DEPLOY_POSTGRES_CONNECTION_DATABASE, ''}
    POSTGRES_CONNECTION_HOST: ${env:DEPLOY_POSTGRES_CONNECTION_HOST, ''}
    POSTGRES_CONNECTION_PASSWORD: ${env:DEPLOY_POSTGRES_CONNECTION_PASSWORD, ''}
    POSTGRES_CONNECTION_USER: ${env:DEPLOY_POSTGRES_CONNECTION_USER, ''}
  name: 'aws'
  region: ${opt:region,env:AWS_REGION,'eu-central-1'}
  runtime: nodejs20.x
  stage: ${opt:stage,env:STAGE,'dev'}
